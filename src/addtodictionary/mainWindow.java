package addtodictionary;

import dict.entity.Entries;
import dict.util.HibernateUtil;
import java.awt.Font;
import java.awt.Image;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;

/**
 *
 * @author csc
 */
public class mainWindow extends javax.swing.JFrame {

    /**
     * Creates new form mainWindow
     */
    public mainWindow() {

        initComponents();
        outputTableConf();
        //Connection cn = connectToDB();
        //try {
        //Statement stmt = cn.createStatement();
        // String querySelect = "SELECT word_pl, word_en word FROM word_list ORDER BY word_pl";
        //ResultSet rs = stmt.executeQuery(querySelect);
        List full = getHQLQuery(QUERY_FULL);
        totalWordslbl.setText("Total words: " + full.size());
        //} catch (SQLException ex) {
        // Logger.getLogger(mainWindow.class.getName()).log(Level.SEVERE, null, ex);
        //}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contextMenuPop = new javax.swing.JPopupMenu();
        Panel1 = new javax.swing.JPanel();
        titlelbl = new javax.swing.JLabel();
        totalWordslbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        introText = new javax.swing.JTextArea();
        addToDict = new javax.swing.JButton();
        getDBdata = new javax.swing.JButton();
        addedlbl = new javax.swing.JLabel();
        updateTablebtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableIn = new javax.swing.JTable();
        deleteAllbtn = new javax.swing.JButton();

        contextMenuPop.setInheritsPopupMenu(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Personal Dictionary");
        setBackground(new java.awt.Color(0, 0, 0));
        setIconImage(getIcon());

        Panel1.setBackground(new java.awt.Color(51, 51, 51));
        Panel1.setForeground(new java.awt.Color(255, 255, 255));

        titlelbl.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        titlelbl.setForeground(new java.awt.Color(255, 255, 255));
        titlelbl.setText("ADD WORDS TO PERSONAL DICTIONARY");

        totalWordslbl.setFont(new java.awt.Font("Californian FB", 1, 18)); // NOI18N
        totalWordslbl.setForeground(new java.awt.Color(255, 102, 102));
        totalWordslbl.setText("Words in dictionary:");

        introText.setColumns(20);
        introText.setRows(5);
        introText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                introTextMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(introText);

        addToDict.setText("Add to list");
        addToDict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToDictActionPerformed(evt);
            }
        });

        getDBdata.setText("Get Data from DB");
        getDBdata.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                getDBdataMouseClicked(evt);
            }
        });

        addedlbl.setFont(new java.awt.Font("Californian FB", 1, 18)); // NOI18N
        addedlbl.setForeground(new java.awt.Color(153, 255, 153));
        addedlbl.setText("Words added:");

        updateTablebtn.setText("Update table");
        updateTablebtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateTablebtnMouseClicked(evt);
            }
        });

        table.setFont(new java.awt.Font("Calibri", 1, 11)); // NOI18N
        table.setForeground(new java.awt.Color(6, 60, 60));
        table.setModel(getTableModel());
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        table.setColumnSelectionAllowed(true);
        jScrollPane2.setViewportView(table);
        table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        tableIn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Word", "Definition"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableIn.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tableIn.setColumnSelectionAllowed(true);
        tableIn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableInMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableIn);
        tableIn.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tableIn.getColumnModel().getColumn(0).setMinWidth(150);
        tableIn.getColumnModel().getColumn(0).setPreferredWidth(100);
        tableIn.getColumnModel().getColumn(0).setMaxWidth(200);
        tableIn.getColumnModel().getColumn(1).setMinWidth(150);
        tableIn.getColumnModel().getColumn(1).setPreferredWidth(100);
        tableIn.getColumnModel().getColumn(1).setMaxWidth(200);

        deleteAllbtn.setText("DEL");
        deleteAllbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteAllbtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout Panel1Layout = new javax.swing.GroupLayout(Panel1);
        Panel1.setLayout(Panel1Layout);
        Panel1Layout.setHorizontalGroup(
            Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addComponent(titlelbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteAllbtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalWordslbl)
                        .addGap(86, 86, 86)
                        .addComponent(getDBdata, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addComponent(addToDict)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addedlbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(updateTablebtn))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        Panel1Layout.setVerticalGroup(
            Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titlelbl)
                    .addComponent(totalWordslbl)
                    .addComponent(addedlbl)
                    .addComponent(updateTablebtn)
                    .addComponent(addToDict)
                    .addComponent(getDBdata, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteAllbtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addToDictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToDictActionPerformed
        //try {
        //Statement stmt = getStmt();
        TreeSet<Entries> entries = new TreeSet<Entries>(getHQLQuery(QUERY_FULL));
        TreeSet<Entries> newEntries = new TreeSet<Entries>();
        //String querySelect = "SELECT word_pl, word_en FROM word_list ORDER BY word_pl";
        // ResultSet rs = stmt.executeQuery(querySelect);
        //while (rs.next()) {
        //    entry.add(new Entry(rs.getString(1).trim(), rs.getString(2).trim()));
        // }

        for (int i = 0; i < tableIn.getRowCount(); i++) {
            boolean filled = tableIn.getValueAt(i, 0) != null && !tableIn.getValueAt(i, 0).toString().trim().equals("");
            if (filled) {
                Object valueAtWord = tableIn.getValueAt(i, 0);
                Object valueAtDef = tableIn.getValueAt(i, 1);
                String word = "";
                String def = "";
                char[] wordArr = valueAtWord.toString().trim().toCharArray();
                char first = Character.toUpperCase(wordArr[0]);
                word = first + valueAtWord.toString().trim().substring(1).toLowerCase().replace("_", " ");
                if (valueAtDef != null && valueAtDef.toString().trim().equals("")) {
                    char[] defArr = valueAtDef.toString().trim().toCharArray();
                    char firstDef = Character.toUpperCase(defArr[0]);
                    def = firstDef + valueAtDef.toString().trim().substring(1).toLowerCase().replace("_", " ");
                }
                newEntries.add(new Entries(word, 0, def));
            }
        }

        String[] txtBoxEntry = introText.getText().split("\\r?\\n");

        for (int i = 0; i < txtBoxEntry.length; i++) {
            String[] text = txtBoxEntry[i].split("-");
            if (!text[0].equals("")) {
                char first = Character.toUpperCase(text[0].trim().charAt(0));
                char firstDef = Character.toUpperCase(text[1].trim().charAt(0));
                String word = first + text[0].trim().substring(1).toLowerCase().replace("_", " ");
                String def = firstDef + text[1].trim().substring(1).toLowerCase().replace("_", " ");
                newEntries.add(new Entries(word, 0, def));
            }
        }
        //Iterator<Entries> itrWord = newEntries.iterator();
        //Iterator<Entries> itrDef = newEntries.iterator();
        //Iterator<Entries> itrList = entries.iterator();
        int added = 0;
        int nr = 0;
        boolean inList = false;
        for (Entries newE : newEntries) {
            for (Entries e : entries) {
                if (newE.getWord().equals(e.getWord())) {
                    inList = true;
                }
            }
            if (inList == false) {
                String def = newE.getDefinition();
                String word = newE.getWord();
                insertData(nr, word, def);
            } else {
                inList = false;
            }
        }
        TreeSet<Entries> newList = new TreeSet<Entries>(getHQLQuery(QUERY_FULL));
        for (Entries nList : newList) {
            nr++;
            executeHQLQuery(UPDATE_QUERY, nr, nList.getWord());
        }

        /*while (itrWord.hasNext()) {
         while (itrList.hasNext()) {
         if (itrWord.next().compareTo(itrList.next())) {
         inList = true;
         }
         }
         if (inList == false) {
         nr++;
            
         String def = itrDef.next().getDefinition();
         String word = itrWord.next().getWord();
         insertData(nr, word, def);
         //select oo.id, oo.name from OtherObject oo"
         // String queryInsert = "INSERT INTO word_list (n, word_pl, word_en) VALUES (" + nr + ",'" + word_pl + "','" + word_en + "')";
         // stmt.executeUpdate(queryInsert);
         }*/


        addedlbl.setText("Words added: " + added);
        totalWordslbl.setText("Total words: " + entries.size());
        //  stmt.close();
        updateTable();
        // } catch (SQLException ex) {
        //     Logger.getLogger(mainWindow.class.getName()).log(Level.SEVERE, null, ex);
        // }
    }//GEN-LAST:event_addToDictActionPerformed

    private void introTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_introTextMouseClicked
        ContextMenuMouseListener contextMenuMouseListener = new ContextMenuMouseListener();
        contextMenuMouseListener.mouseClicked(evt);
    }//GEN-LAST:event_introTextMouseClicked

    private void getDBdataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getDBdataMouseClicked
        try {
            Connection cn = connectToDBbugflow();
            String querySelect = "SELECT column_name FROM information_schema.columns;";
            ArrayList<String> columns = new ArrayList<String>();
            Statement stmt = cn.createStatement();
            ResultSet rs = stmt.executeQuery(querySelect);
            while (rs.next()) {
                columns.add(rs.getString(1));
            }
            for (int i = 0; i < columns.size(); i++) {
                introText.append(columns.get(i) + "\r\n");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_getDBdataMouseClicked

    private void updateTablebtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateTablebtnMouseClicked
        updateTable();
    }//GEN-LAST:event_updateTablebtnMouseClicked

    private void tableInMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableInMouseClicked
        ContextMenuMouseListener contextMenuMouseListener = new ContextMenuMouseListener();
        contextMenuMouseListener.mouseClicked(evt);
    }//GEN-LAST:event_tableInMouseClicked

    private void deleteAllbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteAllbtnMouseClicked
        //try {
        //    String queryDelete = "DELETE FROM word_list";
        //     Statement stmt = connectToDB().createStatement();
        //     stmt.executeUpdate(queryDelete);
        // } catch (SQLException ex) {
        //     Logger.getLogger(mainWindow.class.getName()).log(Level.SEVERE, null, ex);
        //}
        executeHQLQuery(DELETE_QUERY_FULL, 0, "");
        updateTable();
    }//GEN-LAST:event_deleteAllbtnMouseClicked

    public void outputTableConf() {
        Font font = new Font("Calibri", Font.BOLD, 12);

        table.getColumnModel().getColumn(0).setMinWidth(30);
        table.getColumnModel().getColumn(0).setPreferredWidth(30);
        table.getColumnModel().getColumn(0).setMaxWidth(30);
        table.setFont(font);
        table.getColumnModel().getColumn(1).setMinWidth(100);
        table.getColumnModel().getColumn(1).setPreferredWidth(150);
        table.getColumnModel().getColumn(1).setMaxWidth(200);
        table.getColumnModel().getColumn(2).setMinWidth(100);
        table.getColumnModel().getColumn(2).setPreferredWidth(150);
        table.getColumnModel().getColumn(2).setMaxWidth(200);
        table.getColumnModel().getColumn(0).setResizable(false);
    }

    private ListTableModel getTableModel() {
        try {
            //try {

            //Connection cn = connectToDB();
            //Statement stmt = cn.createStatement();
            //String querySelect = "SELECT n, word_pl, word_en word FROM word_list ORDER BY word_pl";
            //ResultSet rs = stmt.executeQuery(querySelect);
            List list = getHQLQuery(QUERY_FULL);
            ArrayList<String> colName = new ArrayList<String>();
            colName.add("n");
            colName.add("PL");
            colName.add("EN");
            ListTableModel model = ListTableModel.createModelFromHQL(list, colName);
            return model;
        } catch (SQLException ex) {
            Logger.getLogger(mainWindow.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }

    }

    /*private ResultSet executeStmt(String query) {
     try {
     Statement stmt = connectToDB().createStatement();
     return stmt.executeQuery(query);
     } catch (SQLException ex) {
     Logger.getLogger(mainWindow.class.getName()).log(Level.SEVERE, null, ex);
     return null;
     }
     }*/
    private void updateTable() {
        table.setModel(getTableModel());
        outputTableConf();
    }

    private Image getIcon() {
        try {
            return ImageIO.read(getClass().getResource("/res/icon.jpg"));
        } catch (IOException ex) {
            return null;
        }
    }

    /*public static Connection connectToDB() {
     Connection connection = null;
     try {
     Class.forName("org.postgresql.Driver");
     } catch (ClassNotFoundException e) {
     System.out.println("Where is your PostgreSQL JDBC Driver? "
     + "Include in your library path!");
     }
     try {
     connection = DriverManager.getConnection(
     "jdbc:postgresql://localhost/dictionary", "postgres",
     "postgres");
     } catch (SQLException e) {
     System.out.println("Connection Failed! Check output console");
     }
     return connection;
     }*/
    public static Connection connectToDBbugflow() {
        Connection connection = null;
        try {
            Class.forName("org.postgresql.Driver");
        } catch (ClassNotFoundException e) {
            System.out.println("Where is your PostgreSQL JDBC Driver? "
                    + "Include in your library path!");
        }
        try {
            connection = DriverManager.getConnection(
                    "jdbc:postgresql://localhost/bugflow2", "postgres",
                    "postgres");
        } catch (SQLException e) {
            System.out.println("Connection Failed! Check output console");
        }
        return connection;
    }
    private static String QUERY_FULL = "from Entries";
    private static String DELETE_QUERY_FULL = "DELETE FROM Entries";
    private static String UPDATE_QUERY = "UPDATE Entries set n = :nr "+ 
             "WHERE word = :word";

    private void executeHQLQuery(String hql, int nr, String word) {
        try {
            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();
            Query q = session.createQuery(hql);
            if (hql.equals(UPDATE_QUERY)) {
                q.setParameter("nr", nr);
                q.setParameter("word", word);
            }
            q.executeUpdate();
            session.getTransaction().commit();
        } catch (HibernateException he) {
            he.printStackTrace();
        }
    }

    private List getHQLQuery(String hql) {
        try {
            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();
            Query q = session.createQuery(hql);
            return q.list();
        } catch (HibernateException he) {
            he.printStackTrace();
            return null;
        }
    }

    private void insertData(int n, String word, String def) {
        Session sess = HibernateUtil.getSessionFactory().openSession();
        sess.beginTransaction();
        Entries entry = new Entries(word, n, def);
        sess.save(entry);
        System.out.println("Successfully data insert in database");
        sess.getTransaction().commit();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Panel1;
    private javax.swing.JButton addToDict;
    private javax.swing.JLabel addedlbl;
    private javax.swing.JPopupMenu contextMenuPop;
    private javax.swing.JButton deleteAllbtn;
    private javax.swing.JButton getDBdata;
    private javax.swing.JTextArea introText;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable table;
    private javax.swing.JTable tableIn;
    private javax.swing.JLabel titlelbl;
    private javax.swing.JLabel totalWordslbl;
    private javax.swing.JButton updateTablebtn;
    // End of variables declaration//GEN-END:variables
}
