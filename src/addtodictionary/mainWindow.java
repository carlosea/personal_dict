package addtodictionary;

import java.awt.Image;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JTable;

/**
 *
 * @author csc
 */
public class mainWindow extends javax.swing.JFrame {

    /**
     * Creates new form mainWindow
     */
    public mainWindow() {

        initComponents();
        table.getColumnModel().getColumn(0).setMinWidth(30);
        table.getColumnModel().getColumn(0).setPreferredWidth(30);
        table.getColumnModel().getColumn(0).setMaxWidth(30);
        table.getColumnModel().getColumn(1).setMinWidth(100);
        table.getColumnModel().getColumn(1).setPreferredWidth(150);
        table.getColumnModel().getColumn(1).setMaxWidth(200);
        table.getColumnModel().getColumn(2).setMinWidth(100);
        table.getColumnModel().getColumn(2).setPreferredWidth(150);
        table.getColumnModel().getColumn(2).setMaxWidth(200);
        table.getColumnModel().getColumn(0).setResizable(false);
        Connection cn = connectToDB();
        try {
            Statement stmt = cn.createStatement();
            String querySelect = "SELECT word_pl, word_en word FROM word_list ORDER BY word_pl";
            ResultSet rs = stmt.executeQuery(querySelect);
            int n = 1;
            while (rs.next()) {
                n++;
            }
            totalWordslbl.setText("Total words: " + (n - 1));

        } catch (SQLException ex) {
            Logger.getLogger(mainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private ListTableModel getTableModel() {
        try {
            Connection cn = connectToDB();
            Statement stmt = cn.createStatement();
            String querySelect = "SELECT n, word_pl, word_en word FROM word_list ORDER BY word_pl";
            ResultSet rs = stmt.executeQuery(querySelect);
            ListTableModel model = ListTableModel.createModelFromResultSet(rs);
            
            ArrayList<String> colName = new ArrayList<String>();
            colName.add("n");
            colName.add("PL");
            colName.add("EN");
            model.columnNames = colName;
            return model;
        } catch (SQLException ex) {
            Logger.getLogger(mainWindow.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contextMenuPop = new javax.swing.JPopupMenu();
        Panel1 = new javax.swing.JPanel();
        titlelbl = new javax.swing.JLabel();
        totalWordslbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        introText = new javax.swing.JTextArea();
        addToDict = new javax.swing.JButton();
        getDBdata = new javax.swing.JButton();
        addedlbl = new javax.swing.JLabel();
        updateTablebtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablee = new javax.swing.JTable();
        jToolBar1 = new javax.swing.JToolBar();

        contextMenuPop.setInheritsPopupMenu(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Personal Dictionary");
        setBackground(new java.awt.Color(0, 0, 0));
        setIconImage(getIcon());

        Panel1.setBackground(new java.awt.Color(51, 51, 51));
        Panel1.setForeground(new java.awt.Color(255, 255, 255));

        titlelbl.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        titlelbl.setForeground(new java.awt.Color(255, 255, 255));
        titlelbl.setText("ADD WORDS TO PERSONAL DICTIONARY");

        totalWordslbl.setFont(new java.awt.Font("Californian FB", 1, 18)); // NOI18N
        totalWordslbl.setForeground(new java.awt.Color(255, 102, 102));
        totalWordslbl.setText("Words in dictionary:");

        introText.setColumns(20);
        introText.setRows(5);
        introText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                introTextMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(introText);

        addToDict.setText("Add to list");
        addToDict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToDictActionPerformed(evt);
            }
        });

        getDBdata.setText("Get Data from DB");
        getDBdata.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                getDBdataMouseClicked(evt);
            }
        });

        addedlbl.setFont(new java.awt.Font("Californian FB", 1, 18)); // NOI18N
        addedlbl.setForeground(new java.awt.Color(153, 255, 153));
        addedlbl.setText("Words added:");

        updateTablebtn.setText("Update table");
        updateTablebtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateTablebtnMouseClicked(evt);
            }
        });

        table.setFont(new java.awt.Font("Calibri", 1, 11)); // NOI18N
        table.setModel(getTableModel());
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        table.setColumnSelectionAllowed(true);
        jScrollPane2.setViewportView(table);
        table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        tablee.setBackground(new java.awt.Color(153, 255, 255));
        tablee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Title 1"
            }
        ));
        tablee.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane3.setViewportView(tablee);
        tablee.getColumnModel().getColumn(0).setMinWidth(150);
        tablee.getColumnModel().getColumn(0).setPreferredWidth(100);
        tablee.getColumnModel().getColumn(0).setMaxWidth(200);

        jToolBar1.setRollover(true);

        javax.swing.GroupLayout Panel1Layout = new javax.swing.GroupLayout(Panel1);
        Panel1.setLayout(Panel1Layout);
        Panel1Layout.setHorizontalGroup(
            Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel1Layout.createSequentialGroup()
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(titlelbl)
                        .addGap(72, 72, 72)
                        .addComponent(totalWordslbl))
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(Panel1Layout.createSequentialGroup()
                                .addComponent(getDBdata)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addToDict))
                            .addComponent(jScrollPane1))
                        .addGap(18, 18, 18)
                        .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(Panel1Layout.createSequentialGroup()
                                .addComponent(addedlbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(updateTablebtn))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(70, 70, 70)
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        Panel1Layout.setVerticalGroup(
            Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titlelbl)
                    .addComponent(totalWordslbl))
                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Panel1Layout.createSequentialGroup()
                                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(getDBdata)
                                    .addComponent(addToDict))
                                .addGap(13, 13, 13))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Panel1Layout.createSequentialGroup()
                                .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(addedlbl)
                                    .addComponent(updateTablebtn))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(Panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)))
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Panel1Layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 90, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addToDictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToDictActionPerformed
        try {
            Connection cn = connectToDB();
            Statement stmt = cn.createStatement();
            TreeSet<String> list = new TreeSet<String>();
            String querySelect = "SELECT word_pl FROM word_list ORDER BY word_pl";
            ResultSet rs = stmt.executeQuery(querySelect);
            while (rs.next()) {
                list.add(rs.getString(1).trim());
            }
            String queryDelete = "DELETE FROM word_list";
            stmt.executeUpdate(queryDelete);
            String[] text = introText.getText().split("\\r?\\n");
            for (int i = 0; i < text.length; i++) {
                if (!text[i].equals("")) {
                    char first = Character.toUpperCase(text[i].trim().toLowerCase().replace("_", " ").charAt(0));
                    String word = first + text[i].substring(1).trim().toLowerCase().replace("_", " ");
                    list.add(word);
                }
            }
            Iterator<String> itr = list.iterator();
            int added = 0;
            int nr = 0;
            String word_en = "";
            while (itr.hasNext()) {
                nr++;
                String word_pl = itr.next();
                String queryInsert = "INSERT INTO word_list (n, word_pl, word_en) VALUES (" + nr + ",'" + word_pl + "','" + word_en + "')";
                stmt.executeUpdate(queryInsert);
            }
            addedlbl.setText("Words added: " + added);
            totalWordslbl.setText("Total words: " + list.size());
            stmt.close();
        } catch (SQLException ex) {
            Logger.getLogger(mainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addToDictActionPerformed

    private void introTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_introTextMouseClicked
        ContextMenuMouseListener contextMenuMouseListener = new ContextMenuMouseListener();
        contextMenuMouseListener.mouseClicked(evt);
    }//GEN-LAST:event_introTextMouseClicked

    private void getDBdataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getDBdataMouseClicked
        try {
            Connection cn = connectToDBbugflow();
            String querySelect = "SELECT column_name FROM information_schema.columns;";
            ArrayList<String> columns = new ArrayList<String>();
            Statement stmt = cn.createStatement();
            ResultSet rs = stmt.executeQuery(querySelect);
            while (rs.next()) {
                columns.add(rs.getString(1));
            }
            for (int i = 0; i < columns.size(); i++) {
                introText.append(columns.get(i) + "\r\n");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_getDBdataMouseClicked

    private void updateTablebtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateTablebtnMouseClicked
        table.setModel(getTableModel());
    }//GEN-LAST:event_updateTablebtnMouseClicked

    private Image getIcon() {
        try {
            return ImageIO.read(getClass().getResource("/res/icon.jpg"));
        } catch (IOException ex) {
            return null;
        }
    }

    public static Connection connectToDB() {
        Connection connection = null;
        try {
            Class.forName("org.postgresql.Driver");
        } catch (ClassNotFoundException e) {
            System.out.println("Where is your PostgreSQL JDBC Driver? "
                    + "Include in your library path!");
        }
        try {
            connection = DriverManager.getConnection(
                    "jdbc:postgresql://localhost/dictionary", "postgres",
                    "postgres");
        } catch (SQLException e) {
            System.out.println("Connection Failed! Check output console");
        }
        return connection;
    }

    public static Connection connectToDBbugflow() {
        Connection connection = null;
        try {
            Class.forName("org.postgresql.Driver");
        } catch (ClassNotFoundException e) {
            System.out.println("Where is your PostgreSQL JDBC Driver? "
                    + "Include in your library path!");
        }
        try {
            connection = DriverManager.getConnection(
                    "jdbc:postgresql://localhost/bugflow2", "postgres",
                    "postgres");
        } catch (SQLException e) {
            System.out.println("Connection Failed! Check output console");
        }
        return connection;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Panel1;
    private javax.swing.JButton addToDict;
    private javax.swing.JLabel addedlbl;
    private javax.swing.JPopupMenu contextMenuPop;
    private javax.swing.JButton getDBdata;
    private javax.swing.JTextArea introText;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTable table;
    private javax.swing.JTable tablee;
    private javax.swing.JLabel titlelbl;
    private javax.swing.JLabel totalWordslbl;
    private javax.swing.JButton updateTablebtn;
    // End of variables declaration//GEN-END:variables
}
